/*
 * =====================================================================================
 *
 *       Filename:  Euler61.cpp
 *
 *    Description:  Solution to Project Euler, Problem 61
 *
 *        Version:  1.0
 *        Created:  9/6/2016 9:49:25 PM
 *       Revision:  none
 *       Compiler:  g++
 *
 *         Author:  Andrew Epstein
 *        Problem:  Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
 *
 *                  Triangle		P3,n=n(n+1)/2		1, 3, 6, 10, 15, ...
 *                  Square		P4,n=n²			1, 4, 9, 16, 25, ...
 *                  Pentagonal		P5,n=n(3n−1)/2		1, 5, 12, 22, 35, ...
 *                  Hexagonal		P6,n=n(2n−1)		1, 6, 15, 28, 45, ...
 *                  Heptagonal		P7,n=n(5n−3)/2		1, 7, 18, 34, 55, ...
 *                  Octagonal		P8,n=n(3n−2)		1, 8, 21, 40, 65, ...
 *
 *                  The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
 *                  The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
 *                  Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
 *                  This is the only set of 4-digit numbers with this property.
 *                  Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
 *                  triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
 *         Answer:  28684
 * =====================================================================================
 */

#include "../helper.hpp"

map<tuple<int, int>, vector<tuple<int, int>>> ds;
vector<tuple<int, int>> p;

int next( vector<int> types, vector<int> data ) {
	if( types.size() == 6 && data[0] / 100 == data.back() % 100 ) {
		return sum( data );
	}

	for( auto && t : ds[make_tuple( types.back(), data.back() )] ) {
		if( find( types.begin(), types.end(), get<0>( t ) ) == types.end() ) {
			types.push_back( get<0>( t ) );
			data.push_back( get<1>( t ) );
			return next( types, data );
		}
	}

	return 0;
}

int solve61() {
	int n = 19;

	while( n < 141 ) {
		for( int i = 3; i <= 8; ++i ) {
			int tmp = figurateNumber( i, n );

			if( 1000 <= tmp && tmp <= 10000 && tmp % 100 > 9 ) {
				p.push_back( make_tuple( i, tmp ) );
			}
		}

		n += 1;
	}

	for( auto && a : p ) {
		int t1 = get<0>( a );
		int d1 = get<1>( a );

		for( auto && b : p ) {
			int t2 = get<0>( b );
			int d2 = get<1>( b );

			if( t1 != t2 && d1 % 100 == d2 / 100 ) {
				ds[a].push_back( b );
			}
		}
	}

	for( auto && a : ds ) {
		vector<int> type = { get<0>( get<0>( a ) ) };
		vector<int> data = { get<1>( get<0>( a ) ) };
		int b = next( type, data );

		if( b != 0 ) {
			return b;
		}
	}

	return 0;
}

