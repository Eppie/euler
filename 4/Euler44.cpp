/*
 * =====================================================================================
 *
 *       Filename:  Euler44.cpp
 *
 *    Description:  Solution to Project Euler, Problem 44
 *
 *        Version:  1.0
 *        Created:  8/26/2016 2:47:07 AM
 *       Revision:  none
 *       Compiler:  g++
 *
 *         Author:  Andrew Epstein
 *        Problem:  Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 *                  1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *                  It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *                  Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
 *         Answer:  5482660
 * =====================================================================================
 */

#include "../helper.hpp"

// The 2394th pentagonal number is the largest we need to know about - it's Pk + Pj
#define SIZE 2395

int solve44() {
  // We store the pentagonal numbers twice, once in a set for fast lookup, and once in a vector so that we can iterate through them
  unordered_set<int> pentNumberSet;
  vector<int> pentNumberVector;
  int result = 9999999;

  for( int i = 1; i <= SIZE; ++i ) {
    int pent = genPent( i );
    pentNumberSet.insert( pent );
    pentNumberVector.push_back( pent );
  }

  for( int i = 0; i < SIZE; ++i ) {
    for( int j = i + 1; j < SIZE; ++j ) {
      int sum = pentNumberVector[i] + pentNumberVector[j];
      int D = pentNumberVector[j] - pentNumberVector[i];

      // Check that the sum and difference are both pentagonal
      if( pentNumberSet.find( sum ) != pentNumberSet.end() && pentNumberSet.find( D ) != pentNumberSet.end() ) {
        if( D < result ) {
          result = D;
        }
      }
    }
  }

  return result;
}
