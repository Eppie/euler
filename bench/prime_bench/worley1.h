#include <cstdlib>

static const unsigned char SPRPlookup[1024] = {
    5,  6,  11, 15, 76, 15, 11, 26, 10, 35, 29, 13, 22, 6,  14, 3,  21, 24, 30, 13, 6,  11, 12, 6,  11, 11, 5,  11, 19,
    3,  13, 14, 3,  6,  17, 26, 6,  13, 13, 13, 2,  6,  5,  2,  11, 15, 7,  3,  10, 37, 43, 18, 33, 5,  37, 13, 5,  3,
    37, 14, 26, 5,  6,  15, 19, 45, 11, 24, 2,  6,  23, 2,  11, 10, 2,  15, 5,  5,  15, 15, 15, 55, 5,  92, 10, 5,  18,
    10, 2,  66, 22, 21, 2,  42, 13, 5,  17, 3,  2,  6,  2,  3,  2,  13, 3,  14, 14, 42, 6,  7,  39, 6,  15, 3,  24, 5,
    3,  11, 14, 22, 11, 5,  26, 22, 14, 2,  28, 6,  19, 7,  7,  10, 2,  45, 40, 11, 31, 2,  11, 17, 33, 12, 23, 2,  14,
    10, 13, 15, 13, 6,  3,  3,  3,  38, 7,  23, 18, 7,  6,  10, 10, 5,  11, 5,  6,  2,  2,  11, 6,  12, 21, 5,  43, 6,
    11, 15, 21, 55, 38, 13, 2,  2,  17, 10, 13, 13, 13, 7,  10, 5,  13, 3,  29, 14, 11, 23, 18, 5,  2,  7,  2,  14, 10,
    2,  2,  20, 10, 7,  18, 7,  6,  5,  3,  10, 15, 57, 18, 10, 26, 12, 13, 6,  17, 6,  3,  3,  10, 13, 15, 44, 35, 30,
    26, 13, 2,  13, 2,  31, 37, 5,  10, 31, 2,  15, 5,  7,  17, 33, 17, 2,  21, 23, 7,  5,  17, 6,  40, 17, 11, 56, 30,
    30, 10, 3,  15, 11, 2,  15, 3,  5,  2,  2,  17, 22, 2,  10, 2,  7,  12, 13, 5,  22, 5,  20, 17, 7,  6,  18, 18, 6,
    19, 6,  5,  21, 24, 2,  10, 2,  2,  11, 19, 42, 2,  5,  17, 7,  2,  42, 7,  41, 5,  5,  23, 15, 11, 2,  34, 10, 24,
    11, 12, 14, 11, 2,  15, 30, 28, 19, 6,  10, 12, 5,  6,  45, 7,  13, 11, 12, 15, 13, 11, 13, 2,  23, 2,  33, 15, 15,
    11, 10, 24, 26, 13, 31, 13, 7,  11, 23, 5,  12, 17, 14, 7,  29, 29, 15, 22, 19, 14, 11, 15, 19, 2,  15, 2,  28, 13,
    20, 14, 15, 60, 5,  2,  12, 69, 24, 20, 7,  18, 2,  13, 5,  6,  10, 14, 6,  24, 3,  11, 23, 5,  13, 88, 13, 14, 19,
    3,  5,  3,  21, 2,  11, 6,  31, 42, 18, 73, 2,  7,  3,  2,  3,  23, 11, 6,  6,  5,  6,  14, 11, 2,  11, 7,  10, 7,
    38, 39, 5,  15, 2,  19, 5,  7,  22, 13, 7,  11, 24, 10, 20, 14, 3,  2,  10, 15, 3,  13, 15, 29, 11, 10, 3,  6,  5,
    30, 13, 26, 6,  6,  17, 29, 10, 19, 15, 19, 21, 46, 6,  17, 3,  14, 3,  2,  6,  17, 26, 34, 2,  11, 5,  29, 19, 3,
    2,  19, 7,  11, 14, 29, 15, 7,  33, 14, 21, 12, 7,  17, 15, 5,  5,  7,  14, 35, 21, 15, 11, 15, 3,  18, 3,  11, 17,
    7,  21, 20, 3,  15, 11, 10, 3,  24, 47, 10, 5,  10, 5,  3,  42, 6,  2,  10, 21, 3,  2,  2,  5,  14, 7,  3,  2,  14,
    15, 11, 5,  12, 13, 15, 15, 5,  11, 10, 6,  5,  7,  6,  19, 5,  2,  6,  15, 5,  6,  3,  2,  24, 10, 10, 11, 14, 11,
    7,  13, 3,  7,  3,  18, 20, 30, 33, 17, 30, 17, 3,  35, 5,  5,  17, 46, 6,  26, 6,  20, 40, 5,  10, 12, 7,  17, 5,
    12, 2,  6,  5,  10, 5,  7,  7,  7,  3,  17, 11, 10, 34, 10, 15, 2,  6,  3,  11, 23, 13, 6,  2,  18, 14, 10, 7,  6,
    10, 7,  10, 77, 6,  17, 10, 5,  5,  18, 17, 5,  15, 2,  11, 3,  10, 13, 28, 21, 20, 23, 6,  7,  14, 11, 3,  6,  18,
    5,  5,  10, 6,  23, 3,  3,  2,  6,  2,  15, 6,  10, 5,  15, 21, 7,  6,  3,  7,  12, 5,  3,  13, 17, 20, 21, 15, 7,
    2,  14, 40, 20, 5,  11, 7,  7,  10, 10, 31, 11, 13, 21, 43, 3,  14, 22, 10, 22, 23, 2,  10, 10, 3,  7,  3,  20, 7,
    5,  15, 7,  10, 2,  30, 52, 10, 56, 14, 14, 2,  2,  3,  7,  5,  5,  10, 3,  10, 7,  15, 13, 3,  89, 21, 11, 5,  14,
    13, 13, 11, 40, 23, 21, 6,  3,  20, 14, 24, 6,  2,  28, 6,  5,  5,  6,  5,  20, 7,  13, 29, 26, 31, 5,  11, 3,  24,
    5,  7,  5,  29, 38, 3,  19, 13, 6,  2,  22, 10, 7,  22, 5,  29, 7,  11, 6,  3,  2,  37, 7,  7,  6,  19, 12, 2,  91,
    7,  2,  6,  56, 52, 7,  11, 10, 31, 2,  6,  11, 78, 34, 15, 2,  53, 14, 22, 31, 22, 41, 2,  23, 6,  39, 6,  31, 15,
    15, 10, 7,  30, 2,  19, 6,  43, 11, 38, 6,  6,  3,  26, 7,  10, 11, 5,  2,  11, 5,  22, 22, 3,  15, 2,  5,  6,  24,
    10, 17, 7,  10, 11, 2,  23, 13, 5,  11, 11, 6,  21, 18, 3,  21, 10, 21, 2,  11, 5,  7,  44, 43, 31, 10, 13, 3,  2,
    10, 3,  7,  2,  47, 13, 12, 2,  13, 5,  11, 2,  5,  7,  11, 19, 5,  10, 17, 22, 26, 2,  2,  7,  2,  2,  6,  6,  3,
    6,  22, 15, 13, 57, 13, 12, 2,  20, 3,  5,  13, 3,  13, 15, 6,  15, 2,  21, 11, 10, 11, 15, 2,  22, 23, 10, 6,  44,
    7,  2,  10, 5,  31, 6,  2,  5,  22, 15, 5,  17, 11, 2,  6,  6,  13, 23, 6,  5,  11, 7,  28, 29, 22, 2,  7,  11, 6,
    35, 24, 2,  3,  2,  17, 13, 3,  6,  2,  14, 5,  11, 11, 7,  23, 13, 11, 2,  13, 13, 10, 12, 23, 10, 18, 5,  60, 10,
    5,  26, 5,  29, 3,  20, 7,  21, 47};

/* Computes a^n mod m. Classic binary power ladder evaluation.
It may be possible to optimize this based on your architecture, depending especially on its integer % speed, and/or
support for native 64 bit ints. */
uint32_t powmod( uint32_t a, uint32_t n, uint32_t m ) {
  uint64_t result = n & 1 ? a : 1;
  uint64_t aa = a;
  n = n >> 1;

  while( n ) {
    // note 64 bit math used for intermediate answers before mod.
    aa = ( aa * aa ) % m;
    if( n & 1 ) {
      result = ( aa * result ) % m;
    }
    n = n >> 1;
  }
  return static_cast<uint32_t>( result );
}

static bool isSPRP( uint32_t n, uint32_t a ) {
  uint32_t d = n - 1;
  uint32_t ad;
  long s = 0;

  // break down n-1 into d*(2^s). Linux ffs() can be better
  while( ( d & 1 ) == 0 ) {
    ++s;
    d >>= 1;
  }

  ad = powmod( a, d, n ); // (a^d) mod n

  if( ad == 1 ) {
    return true; // 1 == a^d mod n
  }
  if( s > 0 && ad == n - 1 ) {
    return true; // -1 == a^d mod n (tests (a^d)^(2^0))
  }
  for( uint32_t r = 1; r < s; ++r ) {
    // ad is currently ad^(2^(r-1)) so we square it to get ad^(2^r));
    ad = ( ( static_cast<uint64_t>( ad ) ) * ad ) % n;
    if( ad == n - 1 ) {
      return true; // tests (a^d)^(2^(r+1)))
    }
  }
  return false; // false, composite
}

bool worley( uint32_t v ) {
  /* this initial screening test is OPTIONAL, and on many platforms will
  give faster rejection of most composites without a full SPRP test. */
  if( 0 == v % 2 ) {
    return v == 2;
  }
  if( 0 == v % 3 ) {
    return v == 3;
  }
  if( 0 == v % 5 ) {
    return v == 5;
  }
  if( 0 == v % 7 ) {
    return v == 7;
  }
  if( v < 121 ) {
    return true;
  }

  // Hash the value to find the lookup table index for a single SPRP test.
  return isSPRP( v, ( uint32_t ) SPRPlookup[( ( 0x3AC69A35 * v ) >> 22 ) & 1023] );
}
