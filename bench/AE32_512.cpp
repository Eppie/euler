#include <cstdint>
#include <cstdlib>

namespace AE32_512_detail {
static const uint8_t arr[512] = {
    0,  22, 14, 10, 13, 3,  6,  1,  1,  11, 25, 10, 36, 27, 39, 12, 32, 37, 7,  17, 23, 8,  17, 9,  1,  6,  3,  18, 2,
    24, 5,  3,  1,  38, 20, 10, 6,  9,  8,  18, 5,  0,  39, 29, 9,  1,  19, 12, 42, 18, 11, 36, 8,  30, 20, 14, 11, 9,
    3,  13, 8,  11, 6,  0,  33, 19, 22, 1,  9,  16, 2,  1,  22, 3,  4,  18, 4,  9,  9,  3,  8,  7,  3,  3,  4,  7,  5,
    32, 28, 4,  20, 0,  6,  7,  14, 3,  5,  8,  25, 3,  1,  13, 2,  8,  3,  23, 23, 26, 24, 5,  1,  11, 28, 37, 5,  10,
    24, 31, 39, 11, 16, 27, 17, 24, 2,  3,  39, 13, 3,  4,  35, 8,  12, 8,  20, 8,  0,  37, 15, 4,  7,  15, 5,  26, 20,
    16, 7,  7,  19, 22, 5,  13, 4,  1,  14, 4,  27, 2,  18, 12, 26, 27, 15, 4,  17, 0,  25, 35, 9,  1,  0,  17, 29, 22,
    32, 11, 17, 4,  30, 10, 7,  3,  12, 7,  8,  14, 6,  3,  37, 40, 11, 25, 16, 2,  2,  36, 11, 3,  27, 27, 14, 27, 8,
    13, 0,  28, 21, 9,  21, 5,  6,  9,  16, 10, 21, 40, 0,  10, 38, 25, 4,  26, 11, 2,  34, 26, 9,  0,  18, 9,  1,  0,
    22, 5,  17, 29, 20, 10, 33, 17, 0,  14, 2,  5,  14, 8,  33, 3,  13, 2,  0,  3,  0,  36, 22, 14, 2,  28, 7,  22, 41,
    35, 7,  13, 1,  8,  14, 8,  2,  28, 1,  22, 13, 11, 9,  0,  2,  20, 16, 2,  6,  16, 6,  31, 41, 1,  34, 3,  1,  28,
    15, 0,  3,  21, 1,  21, 29, 34, 12, 12, 20, 12, 32, 6,  0,  2,  10, 13, 5,  26, 9,  6,  16, 1,  34, 7,  14, 7,  12,
    4,  11, 14, 2,  4,  12, 34, 12, 23, 5,  0,  4,  42, 3,  29, 7,  10, 2,  15, 13, 31, 3,  40, 4,  15, 13, 8,  0,  0,
    1,  28, 2,  29, 2,  27, 33, 32, 11, 0,  21, 7,  0,  11, 17, 24, 21, 12, 21, 18, 14, 9,  9,  0,  0,  19, 4,  2,  2,
    23, 6,  31, 23, 19, 30, 15, 26, 23, 18, 15, 1,  5,  5,  1,  2,  40, 25, 9,  5,  31, 25, 10, 1,  10, 17, 0,  25, 24,
    9,  12, 20, 13, 15, 30, 24, 6,  5,  38, 5,  38, 5,  10, 6,  12, 20, 0,  2,  26, 14, 16, 15, 6,  23, 1,  18, 11, 28,
    4,  8,  19, 33, 19, 31, 14, 32, 7,  30, 22, 21, 4,  2,  24, 10, 12, 1,  7,  6,  16, 29, 5,  15, 24, 13, 10, 6,  1,
    19, 3,  35, 7,  12, 0,  10, 35, 30, 2,  6,  4,  16, 25, 1,  8,  18, 7,  18, 4,  6,  5,  0,  19, 11, 4,  21, 16, 5,
    17, 10, 23, 7,  19, 18, 6,  4,  11, 15, 0,  1,  16, 19, 13, 20, 3,  17, 15};

static const uint16_t bases[43] = {58090, 15077, 42706, 1611,  44565, 56677, 40421, 47955, 11534, 5986,  1130,
                                   15031, 38693, 43832, 44169, 9197,  55359, 11261, 36285, 39010, 5328,  37799,
                                   52493, 16352, 40094, 61292, 15003, 38634, 52285, 54779, 7690,  45008, 44339,
                                   4440,  37132, 64068, 7192,  9068,  9112,  42894, 60282, 3870,  12735};

uint16_t hash( uint32_t n ) {
  long long t = n;
  t = ( ( t >> 16 ) ^ t ) * 0xda2e4f1;
  return t % 512;
}

bool is_SPRP( uint32_t n, uint32_t a ) {
  uint32_t d = n - 1;
  uint32_t s = 0;
  while( ( d & 1 ) == 0 ) {
    ++s;
    d >>= 1;
  }

  uint64_t cur = 1;
  uint64_t pw = d;
  while( pw ) {
    if( pw & 1 ) {
      cur = ( cur * a ) % n;
    }
    a = ( ( uint64_t ) a * a ) % n;
    pw >>= 1;
  }
  if( cur == 1 ) {
    return true;
  }
  for( uint32_t r = 0; r < s; r++ ) {
    if( cur == n - 1 ) {
      return true;
    }
    cur = ( cur * cur ) % n;
  }
  return false;
}
} // namespace AE32_512_detail

bool AE32_512( uint32_t n ) {
  if( n < 2 ) {
    return false;
  }
  if( n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17 || n == 19 ) {
    return true;
  }
  if( n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17 == 0
      || n % 19 == 0 ) {
    return false;
  }
  uint16_t h = AE32_512_detail::hash( n );
  uint16_t base = AE32_512_detail::bases[AE32_512_detail::arr[h]];
  return AE32_512_detail::is_SPRP( n, base );
}
